// Code generated by "enumer -type=Unit -transform=snake"; DO NOT EDIT.

package units

import (
	"fmt"
	"strings"
)

const _UnitName = "kilo_var_hourkilo_watt_houramperevoltwattvoltamperevardegreedegree_celsiushertzpercentno_unit"

var _UnitIndex = [...]uint8{0, 13, 27, 33, 37, 41, 51, 54, 60, 74, 79, 86, 93}

const _UnitLowerName = "kilo_var_hourkilo_watt_houramperevoltwattvoltamperevardegreedegree_celsiushertzpercentno_unit"

func (i Unit) String() string {
	i -= 1
	if i < 0 || i >= Unit(len(_UnitIndex)-1) {
		return fmt.Sprintf("Unit(%d)", i+1)
	}
	return _UnitName[_UnitIndex[i]:_UnitIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UnitNoOp() {
	var x [1]struct{}
	_ = x[KiloVarHour-(1)]
	_ = x[KiloWattHour-(2)]
	_ = x[Ampere-(3)]
	_ = x[Volt-(4)]
	_ = x[Watt-(5)]
	_ = x[Voltampere-(6)]
	_ = x[Var-(7)]
	_ = x[Degree-(8)]
	_ = x[DegreeCelsius-(9)]
	_ = x[Hertz-(10)]
	_ = x[Percent-(11)]
	_ = x[NoUnit-(12)]
}

var _UnitValues = []Unit{KiloVarHour, KiloWattHour, Ampere, Volt, Watt, Voltampere, Var, Degree, DegreeCelsius, Hertz, Percent, NoUnit}

var _UnitNameToValueMap = map[string]Unit{
	_UnitName[0:13]:       KiloVarHour,
	_UnitLowerName[0:13]:  KiloVarHour,
	_UnitName[13:27]:      KiloWattHour,
	_UnitLowerName[13:27]: KiloWattHour,
	_UnitName[27:33]:      Ampere,
	_UnitLowerName[27:33]: Ampere,
	_UnitName[33:37]:      Volt,
	_UnitLowerName[33:37]: Volt,
	_UnitName[37:41]:      Watt,
	_UnitLowerName[37:41]: Watt,
	_UnitName[41:51]:      Voltampere,
	_UnitLowerName[41:51]: Voltampere,
	_UnitName[51:54]:      Var,
	_UnitLowerName[51:54]: Var,
	_UnitName[54:60]:      Degree,
	_UnitLowerName[54:60]: Degree,
	_UnitName[60:74]:      DegreeCelsius,
	_UnitLowerName[60:74]: DegreeCelsius,
	_UnitName[74:79]:      Hertz,
	_UnitLowerName[74:79]: Hertz,
	_UnitName[79:86]:      Percent,
	_UnitLowerName[79:86]: Percent,
	_UnitName[86:93]:      NoUnit,
	_UnitLowerName[86:93]: NoUnit,
}

var _UnitNames = []string{
	_UnitName[0:13],
	_UnitName[13:27],
	_UnitName[27:33],
	_UnitName[33:37],
	_UnitName[37:41],
	_UnitName[41:51],
	_UnitName[51:54],
	_UnitName[54:60],
	_UnitName[60:74],
	_UnitName[74:79],
	_UnitName[79:86],
	_UnitName[86:93],
}

// UnitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UnitString(s string) (Unit, error) {
	if val, ok := _UnitNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UnitNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Unit values", s)
}

// UnitValues returns all values of the enum
func UnitValues() []Unit {
	return _UnitValues
}

// UnitStrings returns a slice of all String values of the enum
func UnitStrings() []string {
	strs := make([]string, len(_UnitNames))
	copy(strs, _UnitNames)
	return strs
}

// IsAUnit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Unit) IsAUnit() bool {
	for _, v := range _UnitValues {
		if i == v {
			return true
		}
	}
	return false
}
